use std::path::PathBuf;

use serde::{Deserialize, Serialize};
use smart_default::SmartDefault;

use crate::{
    kdbg,
    scripts::{self, KraitScript},
};

#[cfg(debug_assertions)]
const KRAIT_DIR: &str = "krait-dev";

#[cfg(not(debug_assertions))]
const KRAIT_DIR: &str = "krait";

#[derive(SmartDefault, Serialize, Deserialize, Debug, Clone)]
pub struct KraitConfig {
    // krait name
    #[default(String::from("krait"))]
    #[serde(default)]
    pub name: String,

    // krait author
    #[default(String::from("miten <57693631+m1ten@users.noreply.github.com>"))]
    #[serde(default)]
    #[serde(alias = "maintainer")]
    pub author: String,

    // krait version
    #[default(String::from("0.0.1"))]
    #[serde(default)]
    #[serde(alias = "version")]
    pub ver: String,

    // krait description
    #[default(String::from("cross platform package manager"))]
    #[serde(default)]
    #[serde(alias = "description")]
    pub desc: String,

    // krait license
    #[default(String::from("Apache-2.0"))]
    #[serde(default)]
    pub license: String,

    // krait git repository
    #[default(String::from("https://github.com/m1ten/krait"))]
    #[serde(default)]
    pub git: String,

    #[default(None)]
    #[serde(alias = "packages")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pkgs: Option<Vec<String>>,

    #[default(dirs::home_dir().unwrap().join(KRAIT_DIR))]
    #[serde(default)]
    #[serde(alias = "directory")]
    pub dir: PathBuf,

    // krait package repository
    #[default(vec![String::from("https://github.com/m1ten/kraits")])]
    #[serde(default)]
    #[serde(alias = "repositories")]
    pub repos: Vec<String>,

    // krait default flags/args
    #[default(None)]
    #[serde(alias = "flags")]
    #[serde(alias = "arguments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
}

impl KraitScript for KraitConfig {
    fn k_fmt(&self) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        let mut comments = vec![
            "--           Krait Config           ".to_string(),
            "\n-- Automatically generated by Krait ".to_string(),
            "\n--      READ THE DOCUMENTATION      ".to_string(),
            "\n".to_string(),
        ];

        lines.append(&mut comments);

        let dir = self
            .dir
            .to_string_lossy()
            .to_string()
            .replace("\\", "\\\\")
            .replace("\"", "\\\"");

        let mut config = vec![
            "krait.config = {".to_string(),
            "\tname = \"".to_string() + &self.name + "\",",
            "\tauthor = \"".to_string() + &self.author + "\",",
            "\tver = \"".to_string() + &self.ver + "\",",
            "\tdesc = \"".to_string() + &self.desc + "\",",
            "\tlicense = \"".to_string() + &self.license + "\",",
            "\tgit = \"".to_string() + &self.git + "\",",
            "\tdir = \"".to_string() + &dir + "\",",
            "\trepos = {".to_string(),
            "\t\t\"".to_string() + &self.repos[0] + "\",",
            "\t},".to_string(),
            "\targs = {".to_string(),
            "\t},".to_string(),
            "}".to_string(),
            "\n".to_string(),
        ];

        lines.append(&mut config);

        lines
    }
}

impl mlua::UserData for KraitConfig {}

impl KraitConfig {
    pub fn new() -> KraitConfig {
        KraitConfig::default()
    }
}
